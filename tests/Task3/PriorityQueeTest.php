<?php

declare(strict_types=1);

namespace App\Tests\Task3;

use App\Task3\Exception\InvalidPriorityException;
use App\Task3\Exception\UnsuportedException;
use App\Task3\PriorityQuee;
use App\Task3\QueeObject;
use PHPUnit\Framework\TestCase;

class PriorityQueeTest extends TestCase
{
    private ?PriorityQuee $quee = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->quee = new PriorityQuee();
    }

    public function testQueeItemsCount(): void
    {
        $size = 5;

        for ($i = 0; $i < $size; $i++) {
            $name = vsprintf('Quee-object-%d', [$i]);
            $this->quee->enquee(new QueeObject($name, $i));
        }

        $this->assertEquals($size, count($this->quee));
    }

    public function testShouldThrowExceptionWhenPassInvalidPriority(): void
    {
        $this->expectException(InvalidPriorityException::class);

        $this->quee->enquee(new QueeObject('Example name', 14));
    }

    public function testShouldThrowExceptionWhenAssignedNonexistensceProperty(): void
    {
        $this->expectException(UnsuportedException::class);

        $this->quee->setFirstName = 'RafaÅ‚';
    }

    /** @dataProvider getValidQueeObjects */
    public function testShouldReturnValidPriorityByGivenArrayIndex(QueeObject $queeObject, int $priority): void
    {
        $this->quee->enquee($queeObject);

        foreach ($this->quee[$priority] as $item) {
            $this->assertEquals($priority, $item->getPriority());
        }
    }

    private function getValidQueeObjects(): array
    {
        return [
            [new QueeObject('name-1', 1), 1],
            [new QueeObject('name-2', 2), 2],
            [new QueeObject('name-3', 3), 3]
        ];
    }

}