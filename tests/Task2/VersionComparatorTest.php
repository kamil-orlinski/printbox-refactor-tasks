<?php

declare(strict_types=1);

namespace App\Tests\Task2;

use PHPUnit\Framework\TestCase;
use App\Task2\Validator\VersionValidatorInterface;
use App\Task2\Validator\VersionValidator;
use App\Task2\VersionComparatorInterface;
use App\Task2\VersionComparator;
use App\Task2\Exception\InvalidVersionException;

class VersionComparatorTest extends TestCase
{

    private ?VersionComparatorInterface $comparator = null;

    private ?VersionValidatorInterface $validator = null;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->validator = new VersionValidator();
        $this->comparator = new VersionComparator($this->validator);
    }

    /** @dataProvider getVersionExampleData */
    public function testCompareVersions(string $version1, string $version2, int $result): void
    {
        $this->assertEquals($result, $this->comparator->compare($version1, $version2));
    }

    /** @dataProvider getIncorrectData */
    public function testShouldThrowExceptionWhenPassIncorrectData(string $version1, string $version2, int $result): void
    {
        $this->expectException(InvalidVersionException::class);

        $this->comparator->compare($version1, $version2);
    }

    private function getVersionExampleData(): array
    {

        return [
            ['1.0.0', '1.0.1', 1],
            ['1.1', '1.0.1', -1],
            ['1.0.0', '1.0', 0],
            ['1.0.1', '1.0.1a', -1],
            ['9.0.0', '10.0.0', 1],
            ['1.0.1a', '1.0.1b', 1]
        ];
    }

    private function getIncorrectData(): array
    {
        return [
            ['1.0.0.0', '1.0.1', 1],
            ['ab.1.1', '1.0.1', -1],
            ['1.0.0', 'lk.1.0', 0],
            ['1.0a.1', '1.0.1a', -1],
            ['9.0..0', '10.0.0', 1],
            ['1.0.1a', '1.0.1z', 1]
        ];
    }

}